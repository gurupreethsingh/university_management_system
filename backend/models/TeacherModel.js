const mongoose = require("mongoose");

const teacherSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: {
    type: String,
    default: "teacher",
    enum: ["teacher"],
  },
  teacherAvatar: { type: String }, // Path to the avatar image
  coverImage: { type: String }, // Path to the cover image
  phone: { type: String }, // Teacher's phone number
  address: { type: String }, // Teacher's address
  department: { type: String }, // Department the teacher belongs to
  designation: { type: String }, // Teacher's designation (e.g., Professor, Assistant Professor)
  qualifications: { type: String }, // Teacher's academic qualifications
  experience: { type: Number }, // Number of years of teaching experience
  bio: { type: String }, // Short biography of the teacher
  createdDate: { type: Date, default: Date.now },

  // Relations to Courses, Exams, Students, etc.
  assignedCourses: [{ type: mongoose.Schema.Types.ObjectId, ref: "Course" }], // Courses assigned to the teacher
  conductedExams: [{ type: mongoose.Schema.Types.ObjectId, ref: "Exam" }], // Exams conducted by the teacher
  supervisedStudents: [
    { type: mongoose.Schema.Types.ObjectId, ref: "Student" },
  ], // Students supervised by the teacher (e.g., thesis or projects)

  // Additional Responsibilities
  eventsOrganized: [{ type: mongoose.Schema.Types.ObjectId, ref: "Event" }], // Events organized by the teacher
  reports: [{ type: mongoose.Schema.Types.ObjectId, ref: "Report" }], // Reports generated by the teacher
  feedbackGiven: [{ type: mongoose.Schema.Types.ObjectId, ref: "Feedback" }], // Feedback given by the teacher

  // Notifications and Messages
  notifications: [
    { type: mongoose.Schema.Types.ObjectId, ref: "Notification" },
  ], // Notifications received by the teacher
  messagesReceived: [{ type: mongoose.Schema.Types.ObjectId, ref: "Message" }], // Messages received by the teacher
  messagesSent: [{ type: mongoose.Schema.Types.ObjectId, ref: "Message" }], // Messages sent by the teacher

  // Leave and Attendance
  leaveRequests: [
    { type: mongoose.Schema.Types.ObjectId, ref: "LeaveRequest" },
  ], // Leave requests made by the teacher
  attendanceRecords: [
    { type: mongoose.Schema.Types.ObjectId, ref: "Attendance" },
  ], // Attendance records maintained by the teacher

  // Committees and Roles
  committees: [{ type: mongoose.Schema.Types.ObjectId, ref: "Committee" }], // Committees the teacher is part of
  specialRoles: [{ type: String }], // Any special roles assigned to the teacher (e.g., HoD, Course Coordinator)

  // Blogs and Publications
  blogPosts: [{ type: mongoose.Schema.Types.ObjectId, ref: "Blog" }], // Blog posts written by the teacher
  publications: [{ type: mongoose.Schema.Types.ObjectId, ref: "Publication" }], // Academic publications by the teacher
});

const Teacher = mongoose.model("Teacher", teacherSchema);

module.exports = Teacher;
